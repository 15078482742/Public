// <auto-generated />
using System;
using IdentityServer.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IdentityServer.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer.EFCore.AllowedGrantTypeEntity", b =>
                {
                    b.Property<string>("AllowedGrantTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId");

                    b.Property<string>("GrantType");

                    b.HasKey("AllowedGrantTypeId");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.ToTable("AllowedGrantTypeEntity");
                });

            modelBuilder.Entity("IdentityServer.EFCore.ApiResourceEntity", b =>
                {
                    b.Property<string>("ApiResourceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name");

                    b.HasKey("ApiResourceId");

                    b.ToTable("ApiResources");
                });

            modelBuilder.Entity("IdentityServer.EFCore.ClientEntity", b =>
                {
                    b.Property<string>("ClientId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Enabled");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("IdentityServer.EFCore.ClientScopeEntity", b =>
                {
                    b.Property<string>("ScopeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId");

                    b.Property<string>("ScopeName");

                    b.HasKey("ScopeId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientScopeEntity");
                });

            modelBuilder.Entity("IdentityServer.EFCore.ClientSecretEntity", b =>
                {
                    b.Property<string>("ClientSecretId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId");

                    b.Property<string>("Value");

                    b.HasKey("ClientSecretId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientSecretEntity");
                });

            modelBuilder.Entity("IdentityServer.EFCore.IdentityResourceEntity", b =>
                {
                    b.Property<string>("IdentityResourceId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Emphasize");

                    b.Property<bool>("Required");

                    b.Property<bool>("ShowInDiscoveryDocument");

                    b.HasKey("IdentityResourceId");

                    b.ToTable("IdentityResources");
                });

            modelBuilder.Entity("IdentityServer.EFCore.ScopeEntity", b =>
                {
                    b.Property<string>("ScopeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApiResourceId");

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<bool>("Emphasize");

                    b.Property<string>("Name");

                    b.Property<bool>("Required");

                    b.Property<bool>("ShowInDiscoveryDocument");

                    b.HasKey("ScopeId");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("Scopes");
                });

            modelBuilder.Entity("IdentityServer.EFCore.SecretEntity", b =>
                {
                    b.Property<string>("SecretId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApiResourceId");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("Expiration");

                    b.Property<string>("Type");

                    b.Property<string>("Value");

                    b.HasKey("SecretId");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("Secrets");
                });

            modelBuilder.Entity("IdentityServer.EFCore.AllowedGrantTypeEntity", b =>
                {
                    b.HasOne("IdentityServer.EFCore.ClientEntity", "ClientEntity")
                        .WithOne("AllowedGrantTypes")
                        .HasForeignKey("IdentityServer.EFCore.AllowedGrantTypeEntity", "ClientId");
                });

            modelBuilder.Entity("IdentityServer.EFCore.ClientScopeEntity", b =>
                {
                    b.HasOne("IdentityServer.EFCore.ClientEntity", "ClientEntity")
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("IdentityServer.EFCore.ClientSecretEntity", b =>
                {
                    b.HasOne("IdentityServer.EFCore.ClientEntity", "ClientEntity")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("IdentityServer.EFCore.ScopeEntity", b =>
                {
                    b.HasOne("IdentityServer.EFCore.ApiResourceEntity", "ApiResource")
                        .WithMany("Scopes")
                        .HasForeignKey("ApiResourceId");
                });

            modelBuilder.Entity("IdentityServer.EFCore.SecretEntity", b =>
                {
                    b.HasOne("IdentityServer.EFCore.ApiResourceEntity", "ApiResource")
                        .WithMany("Secrets")
                        .HasForeignKey("ApiResourceId");
                });
#pragma warning restore 612, 618
        }
    }
}
